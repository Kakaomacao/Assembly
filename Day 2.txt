<조건 분기문>
jmp 주소 : 무조건 점프
jz 주소 : 이전에 했던 명령의 결과가 0이면 작동
0이면 Z가 1이 되고 그때 jmp 발생 

이름이 알파벳 하나인 레지스터 -> 상태 레지스터

mov eax, 0을 한다고 해서 상태 플래그가 변하지 않음

je : jmp if equal (같으면 점프해라)
-> cmp eax, 0
cmp : compare의 약자
cmp는 빼기 연산이지만 sub와 다른 점은 뺀 결과를 저장하지 않는다는 점

<jne, jnz>
n : not으로 부정의 의미

<ja, jb>
ja : above의 의미
jb : below의 의미
C에 따라서 작동 (carry의 약자) 빌림 또는 올림으로 인해 자릿수 넘어가는 경우 1로 바뀜
ja는 C도 Z도 세팅 되어있지 않은 상태
jb는 C만 확인

<ja, jb + n, e>
jna : 앞이 뒤보다 작거나 같다
jnb : 앞이 뒤보다 크거나 같다

jae : 앞이 뒤보다 크거나 같다
jbe : 앞이 뒤보다 작거나 같다

따라서 jna = jbe / jnb = jae
C에 상관없이 Z가 1이기만 해도 점프가 발생

jc : 플래그 이름을 이용해서 jmp

jnbe = ja / jnba = jb

<jg, jl>
jg : greater의 의미
jl : less의 의미 
ja, jb와 큰 차이가 없어 보이지만 비교하는 데이터를 어떻게 인식하느냐가 다르다
(부호 비트를 취급하는지 안하는지) -> jg, jl은 부호 비트 취급 / ja, jb는 부호 비트 취급 X

S는 sign 플래그, O는 overflow 플래그
SF는 계산 결과 최상위 비트가 1이면 1
ex) 0111(2) + 0001(2) = 1000(2)
OF는 1111(2) + 0001(2)의 결과 올림이 발생하며 0000(2)가 되는데 이 때와 같은 올림 발생시 1
또는 같은 부호를 더했을 때 결과가 다른 부호일 때 1

<PF, AF>
P : partiy
A : auxiliary 보조 캐리 플래그

cf) crc32 오류 체크 및 복구 -> parity의 응용
parity는 동등성을 유지시키는 것
parity에는 2종류
odd parity -> 1의 개수를 항상 홀수개로 유지 (parity bit라는 공간과 합쳐서)
even parity
하위 8비트만 체크하도록 구현되어있음

A는 하위 4비트에 대해서 올림이 발생하면 참이 됨
BCD (Binary-Coded Decimal, 이진화 십진법) -> 이진수 4자리를 묶어서 십진수 1자리처럼

<adc, sbb>
adc : carry flag까지 같이 더해줌 (올림을 추가로 더해주기 위함)
sbb : b는 borrow의 내림을 뜻함

<스택>
LIFO(Last In First Out)으로 가장 마지막에 넣어준 것이 가장 먼저 나오며
꺼내는 것은 pop, 넣는 것은 push라고 표현

ESP는 제일 위의 녀석의 주소(pop하면 나올 녀석)

<mul>
mul : multiplication의 약자
부호가 없는 정수에 대한 곱셈
상위 4바이트는 edx, 하위 4바이트는 eax에 저장
A X B라고 할 때, 항상 A는 eax / B는 원하는 레지스터의 값
Why? : eax가 연산에 특화된 레지스터이기 때문
eax의 a는 accumulator의 약자
edx의 d는 data의 약자

mul mem
mul reg
mul 값은 불가

자리수 규칙 : 4비트 * 4비트 -> 최대 8비트 / 32비트 * 32비트 -> 최대 64비트

If 4바이트 * 4바이트가 아닌 2바이트 * 2바이트 곱셈으로 진행하면?
dx와 ax에 걸쳐서 데이터가 표현됨
1바이트 * 1바이트 곱셈은 ax에 저장

<div>
div : division의 약자
C / B = A -> 4바이트 / 4바이트는 최대 2바이트
저장되는 영역도 곱셈과 비슷 
8바이트의 경우 edx(나머지), eax(몫)
4바이트의 경우 dx, ax
2바이트의 경우 ax
1바이트의 경우 al

제수가 1과 같이 나누어서 자리수 변화가 없는 경우에는 integer overflow 발생
C의 바이트수가 B의 바이트수보다 커야함!! 같다면 C의 바이트수를 높인 것처럼 계산
mul과 마찬가지로 부호 없는 정수에 대한 연산

<imul, idiv>
원래 곱셈과 나눗셈처럼 사용도 가능

2개의 인자를 받을 수도 있음
imul A, B (A는 레지스터만 올 수 있음, B는 레지스터, 메모리, 숫자 가능)
특이하게 B에는 A와 크기가 달라도 imm8이 가능

imul A, B, C -> A = B * C와 같음
A는 only reg
B는 reg, mem
C는 only imm (마찬가지로 크기와 상관없이 8비트 짜리 가능)

imul eax, eax, 7 = imul eax, 7

<stㅁ, clㅁ>
ㅁ에는 상태플래그 이름
st는 set의 약자 -> set은 1로 설정하는 것
cl은 clear의 약자 -> clear는 0으로 비워주는 것
ex) stc 실행하면 C가 1로 바뀜

cf) D는 directoin의 약자 / I는 interrupt의 약자

<비트 연산>
and, or, xor
xor eax, ebx (결과는 eax에)

<test>
비트 연산과 관련
and와 같은 작동
and는 operand 2개를 앞에 저장 but test는 그 결과를 저장하지 않음
어떤 데이터의 값이 참인지 거짓인지 판별할 때 사용
zero값이 세팅되어 있으면 거짓 / 아니면 참
항상 주소 표현을 앞operand로! (비트 연산은 순서가 바뀌어도 상관 없음)

<비트 시프트 연산>
논리 시프트와 산술 시프트
논리 시프트(부호 X)는 0으로 채움
산술 시프트(부호 O)는 MSB를 제일 앞 비어있는 칸에 복사해서 넣음 (오른쪽 시프트할 때)

shr / shl (논리 시프트)
sar / sal (산술 시프트)

ecx의 c는 counter의 의미

오른쪽 시프트는 나누기의 효과 / 왼쪽 시프트는 곱하기의 효과

<반복문>
jecxz : reg의 4바이트 영역이 0이면 점프 
jcxz : reg의 2바이트 영역이 0이면 점프

loop : 감소시키다가 0되면 알아서 빠져나옴
loope = loopz : 추가로 ZF = 1일 때 빠져나와

주소 차이가 1바이트 이내인 경우만 사용 가능!!

<rotate>
비트를 회전시킨다?
-> 1011(2) 왼쪽으로 1번 rotate하면 0111(2)가 된다
ror / rol (오른쪽 / 왼쪽)

rcr / rcl : CF까지 포함한 공간을 rotate
왼쪽으로 회전하는 경우 앞에 CF 공간도 포함시켜서 rotate

차이점 : 그냥 rotate는 CF를 덮어쓰고 덮어쓴 값을 옮겼지만 rcr / rcl은 CF를 옮기고 채움

왼쪽으로 rotate 하는 경우 최상위 비트와 그 다음 최상위 비트를 XOR한 값이 오버플로우한 값이 됨
오른쪽으로 rotate 하는 경우 최상위 비트와 CF와 XOR한 값이 오버플로우 값이 됨

<not, neg>
not은 각 비트 값을 반전시킨다
neg는 정수의 부호를 반전시킨다
ex) 0110(2)를 1001(2)로 바꾼다
