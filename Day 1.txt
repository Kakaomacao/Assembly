CPU : 연산 -> 연산할 공간 : 레지스터 (속도가 빠른 메모리 공간 but 용량이 작음)
RAM : 레지스터에 다 담지 못하므로 프로그램은 RAM에 담겨
하드디스크 : 따로 저장하는 공간

레지스터 이름
EAX, EBX, ECX, EDX, ESP, EBP, ESI, EBI

레지스트리 vs 레지스터 헷갈리면 안돼!!

프로세서 vs 프로세스도 구분
프로세서 : CPU같은 처리 장치
프로세스 : RAM에 올라간 상태

<mov>
mov O, X : O에 X를 넣어라
reg : 레지스터
mov reg, 값(imm)
mov reg, reg
mov reg, reg할 때는 두 reg의 크기가 서로 같아야 가능

옛날에 16비트일 때
AX -> 2바이트 (자리수 낮은 쪽이 AL, 높은 쪽이 AH) 
32비트로 늘어나고 나서
EAX(Extended AX) -> 그대로 AX(AH, AL) 사용 가능
cf) 64비트는 RAX
EAX, EBX, ECX, EDX 모두 비슷하게 사용 가능 AL, AH, BL, BH ...

용량 : HDD > RAM > 범용 레지스터
속도 : 범용 레지스터 > RAM > HDD
주기억장치 : RAM (휘발성)
Why? : 하드디스크는 속도가 너무 느려서 주기억장치로 사용하기 어려움

32비트에서는 4GB의 메모리 공간 이용 가능

어셈블리어에서 주소 접근은 [ ]를 이용
mov mem, mem는 불가!!
mov mem, reg (가능)
mov reg, mem (가능)

DWORD(4바이트) WORD(2바이트) BYTE(바이트) + PTR	cf) QWORD(8바이트)
컴퓨터 구조를 공부할 때 약간 헷갈릴 수 있음
16비트 구조일 때의 WORD를 그대로 단위로 사용해서 2바이트인 것

NOP = No OPeration의 약자
작동하지 않는다는 의미
cf) DS = Data Segment

데이터 저장 방식 - 리틀 엔디안 / 빅 엔디안
리틀 엔디안은 작은 자릿수부터 저장 
ex) 00010100 -> 리틀 엔디안 : 00101000 / 빅 엔디안 : 00010100
리틀 엔디안의 장점 : 낮은 자리 데이터가 먼저 온다 -> 부분을 읽기 쉽다 / 높은 자리수 데이터 추가가 쉽다
빅 엔디안의 장점 : 직관적이기에 알아보기가 쉽다

<jmp>
jmp 주소
EIP : 실행할 곳의 주소를 담고 있는 레지스터
해당 주소의 RAM의 기계어를 가져와서 실행하고 읽어온만큼 EIP올림
jmp는 EIP라는 레지스터에 다른 주소 입력 (mov를 사용할 수 없음)
-> 해당 위치로 주소 값을 빼도록 함

short : 이동할 위치와 jmp할 위치가 멀지 않으면 short가 붙음
먼 곳은 long을 따로 적어주지는 않고 생략

jmp reg
reg에 저장되어 있는 값으로 jmp함 (유효한 곳으로만 이동 가능)

<inc, dec>
inc : increment의 약자
dec : decrement의 약자
inc reg/mem 둘 다 가능
ex) INC DWORD PTR DS:[402000]

<add, sub>
add : addition의 약자 / C언어에서의 +=
sub : subtraction의 약자 / C언어에서의 -=
mov와 동일하게 2가지를 받음
ex) ADD EAX, 2
mov처럼 add mem, mem 불가!!

<주소값의 간접적 사용>
메모리에 주소를 저장해뒀다가 레지스터에 옮긴 후
mov dword ptr ds:[eax], 1234와 같은 형태로 이용
(접근을 위해서는 레지스터에 올려야함)
레지스터에 올려둔 주소값을 이용하여 mov eax, [ebx]의 형태로도 사용이 가능함

<메모리 주소 지정 방식>
offset : 기준에서 어떤 지점까지의 변위차를 나타내는 정수형
[base + offest + index * scale] (+뿐만 아니라 -, * 등도 포함시킬 수 있음)
index는 반드시 reg여야하고 reg는 최대 2개 포함될 수 있음