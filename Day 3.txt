<call, ret>
call : 함수 호출
ret : 다시 돌아오게 함

call : push EIP + jmp 주소의 느낌
call로 호출하면 돌아올 주소를 스택에 저장

스택은 높은 주소에서 작은 주소로 증가함

<frame>
함수의 호출과 관련 -> 함수를 호출하면 frame 하나 형성

frame pointer를 통해서 지역 변수들의 공간을 지정 -> 컴퓨터가 편하게 접근 가능

하지만 여러 함수를 호출하다 보면 이전 지역변수의 frame pointer를 저장해둬야 접근 가능
-> stored(saved) frame pointer을 도입하여 이전 fp를 이용할 수 있게 함
그래서 C언어에서 지역변수 선언을 함수 제일 위쪽에 선언하도록 하는 것

어셈블리에서 EBP가 frame pointer 역할

하나하나 push로 넣어주면 오래 걸릴 수 있음 -> sub esp, imm 등을 통해서 stack을 확보
but 이때는 초기화가 되지 않고 쓰레기값이 들어가게 됨

함수 프롤로그
1. 리턴값을 넣는다
2. 현재 프레임 포인터를 저장한다
3. 새로운 함수의 프레임으로 프레임포인터를 설정한다
4. 지역변수와 같이 함수에서 사용할 공간을 설정한다

<xchg>
exchange의 약자
xchg : 두 개의 메모리에서 서로 내용을 교환

<함수의 인자 전달> (한 가지 방법만 존재하는 것이 아님)
스택에 전달할 데이터 저장 -> 그 다음 함수 호출
fp로부터의 거리를 통해서 데이터에 접근
ex) mov eax, [fp + 2]

1. 인자값을 스택에 push
2. 함수 내부에서 fp와 상대적인 거리로, push한 위치를 계산해서 매개변수로 이용
3. 함수가 리턴된 후에 push한 값을 제거

<함수 호출시 인자 여러 개 넘기기>
가변인자인 경우를 고려하여 가장 마지막 인자부터 스택에 넣음
